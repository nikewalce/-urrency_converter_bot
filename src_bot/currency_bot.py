from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application,
    CommandHandler,
    CallbackQueryHandler,
    MessageHandler,
    filters,
    ContextTypes
)
from currency_service import CurrencyService

class CurrencyBot:
    def __init__(self, token: str):
        self.token = token
        self.application = Application.builder().token(self.token).build()
        self._register_handlers()

    def _register_handlers(self):
        self.application.add_handler(CommandHandler("start", self.start))
        self.application.add_handler(CallbackQueryHandler(self.on_currency_selected))
        self.application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, self.on_amount_entered))

    def get_keyboard(self):
        buttons = [
            [
                InlineKeyboardButton("USD ‚Üí RUB", callback_data="USD_RUB"),
                InlineKeyboardButton("RUB ‚Üí USD", callback_data="RUB_USD")
            ],
            [
                InlineKeyboardButton("THB ‚Üí RUB", callback_data="THB_RUB"),
                InlineKeyboardButton("RUB ‚Üí THB", callback_data="RUB_THB")
            ],
            [
                InlineKeyboardButton("USD ‚Üí THB", callback_data="USD_THB"),
                InlineKeyboardButton("THB ‚Üí USD", callback_data="THB_USD")
            ]
        ]
        return InlineKeyboardMarkup(buttons)

    async def start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        await update.message.reply_text(
            "üí∞ –ö–æ–Ω–≤–µ—Ä—Ç–µ—Ä –≤–∞–ª—é—Ç –¥–ª—è –õ–∏–∑–æ—á–∫–∏‚ù§Ô∏è\n–í—ã–±–µ—Ä–∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏:",
            reply_markup=self.get_keyboard()
        )

    async def on_currency_selected(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        query = update.callback_query
        await query.answer()

        pair = query.data
        context.user_data["currency_pair"] = pair
        from_cur, to_cur = pair.split("_")

        rate = CurrencyService.get_rate(pair)

        if rate is None:
            await query.edit_message_text("–û—à–∏–±–∫–∞: –∫—É—Ä—Å –≤–∞–ª—é—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return

        await query.edit_message_text(
            f"–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è: {from_cur} ‚Üí {to_cur}\n"
            f"–¢–µ–∫—É—â–∏–π –∫—É—Ä—Å: 1 {from_cur} = {rate:.4f} {to_cur}\n"
            "–õ–∏–∑–æ—á–∫–∞, –≤–≤–µ–¥–∏ —Å—É–º–º—É –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏:"
        )

    async def on_amount_entered(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        text = update.message.text.replace(",", ".")
        pair = context.user_data.get("currency_pair")

        if not pair:
            await update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏ –≤–∞–ª—é—Ç—É —á–µ—Ä–µ–∑ /start üåü")
            return

        try:
            amount = float(text)
            result = CurrencyService.convert(amount, pair)
            from_cur, to_cur = pair.split("_")
            rate = CurrencyService.get_rate(pair)

            await update.message.reply_text(
                f"üîπ {amount:.2f} {from_cur} = {result:.2f} {to_cur}\n"
                f"–ö—É—Ä—Å: 1 {from_cur} = {rate:.4f} {to_cur}\n\n"
                "–î–ª—è –Ω–æ–≤–æ–π –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –Ω–∞–∂–º–∏ /start"
            )
        except ValueError:
            await update.message.reply_text("–û—à–∏–±–∫–∞: –≤–≤–µ–¥–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ. –ù–∞–ø—Ä–∏–º–µ—Ä: 100 –∏–ª–∏ 50.5")

    def run(self):
        print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ...")
        try:
            self.application.run_polling()
        except KeyboardInterrupt:
            print("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤—Ä—É—á–Ω—É—é.")
